{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAIaA,G,kBAAO,SAAAC,GAAK,OACxB,yBAAKC,UAAU,kBACd,yBACCC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEJ,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCPPC,EAAW,SAAAR,GAAK,OAC5B,yBAAKC,UAAU,aACbD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCFtBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,2BACCb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SACCF,MCmDYG,E,YAxDd,aAAe,IAAD,8BACb,+CAqBDH,aAAe,SAAAI,GAMd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA1BtC,EAAKC,MAAQ,CAIZd,SAAU,GACVW,YAAa,IAPD,E,iFAWO,IAAD,OAMnBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAYjC,IAAD,EAC0BC,KAAKN,MAA/Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC/CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGjD,OAEC,yBAAK/B,UAAU,OACd,+CAGA,kBAAC,EAAD,CACCY,YAAY,kBACZC,aAAce,KAAKf,eAKpB,kBAAC,EAAD,CAAUL,SAAUqB,S,GAnDNI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.4304f9bb.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nexport const Card = props => (\n\t<div className='card-container'>\n\t\t<img\n\t\t\talt='monster'\n\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n\t\t/>\n\t\t<h2>{props.monster.name}</h2>\n\t\t<p>{props.monster.email}</p>\n\t</div>\n);\n","import React from 'react';\nimport './card-list.css';\nimport { Card } from '../card/card';\n\nexport const CardList = props => (\n\t<div className='card-list'>\n\t\t{props.monsters.map(monster => (\n\t\t\t<Card key={monster.id} monster={monster} />\n\t\t))}\n\t</div>\n);\n","import React from 'react';\n\nimport './search-box.css';\n\n// The is a function component and the main purpose is to render some html\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\t<input\n\t\tclassName='search'\n\t\ttype='search'\n\t\tplaceholder={placeholder}\n\t\tonChange={\n\t\t\thandleChange\n\t\t\t// this.setState(\n\t\t\t// \t//setState actually shouldn't go here because it creates a loop because setState behind the\n\t\t\t// \t// scenes calls render() and in the render it calls setState and so on\n\t\t\t// \t{ searchField: e.target.value },\n\t\t\t// \t() => console.log(this.state), //the second argument in setState is a callback and runs after the setState finishes\n\t\t\t// ); //setState is async so it doesn't return the new value into\n\t\t\t// //searchField yet so that is why it is 1 char behind in the console if we simply have this line of code\n\t\t\t// // console.log(this.state);\n\t\t}\n\t/>\n);\n","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\t// State becomes \"props\" when it trickles down the tree structure of the html\n\t\t\t// We include a key and specify it in the .map so that react can recognise that an element has changed\n\t\t\t// so it only needs to re-render that element which improves the performance\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// Promises are normally used for API calls because we don't know if the request is going to be successful\n\t\t// we can .catch the reject i.e. failed API call and handle it appropriately or use .then to do something\n\t\t// after the successful APi call\n\t\t// .then wraps the value inside a resolved promise object and we can only call .then on a resolved promise\n\t\t// therefore, we can chain .then statements\n\t\tfetch('https://jsonplaceholder.typicode.com/users') //fetch returns a resolved promise or rejects the API call\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ monsters: users }));\n\t}\n\n\thandleChange = e => {\n\t\t// we can use an arrow function outside the render method\n\t\t// the \"this.\" keyword binds a method to its context. if we didn't use an arrow func then it would throw an error\n\t\t// this is because the \"this.\" in front of setState has the wrong context and is no referring to the Component class we extend\n\t\t// however when we use an arrow func the \"this.\" context is set when we first the constructor() is run meaning\n\t\t// meaning we will be in the Component context\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state; //destructuring an js object\n\t\tconst filteredMonsters = monsters.filter(monster =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase()),\n\t\t);\n\n\t\treturn (\n\t\t\t// This is actually jsx and not html. jsx is mimicing html\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monster Rolodex</h1>\n\t\t\t\t{/* //setState actually shouldn't go here because it creates a loop because setState behind the\n\t\t\t\t// scenes calls render() and in the render it calls setState and so on */}\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder='search monsters'\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t{/* Whatever we pass in the CardList jsx object it can be accessed using props in the jsx object's file */}\n\t\t\t\t{/* For example, in the card-list.js file we can use props.monsters to access the list of monsters */}\n\t\t\t\t{/* the key= is special in react it tells ReactDOM to render only that element with a key that has changed */}\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// the code above replaces the html element with root with everything in our <App/> element\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}